{"remainingRequest":"/home/s/repos/rambdax/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/home/s/repos/rambdax/node_modules/@mdx-js/loader/index.js??ref--6-2!/home/s/repos/rambdax/node_modules/source-map-loader/index.js!/home/s/repos/rambdax/files/examples/PartialCurry.md","dependencies":[{"path":"/home/s/repos/rambdax/files/examples/PartialCurry.md","mtime":1555742370844},{"path":"/home/s/repos/rambdax/node_modules/cache-loader/dist/cjs.js","mtime":1559151226407},{"path":"/home/s/repos/rambdax/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559151226362},{"path":"/home/s/repos/rambdax/node_modules/@mdx-js/loader/index.js","mtime":1559151227205},{"path":"/home/s/repos/rambdax/node_modules/source-map-loader/index.js","mtime":1555741369915}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvZmlsZXMvZXhhbXBsZXMvUGFydGlhbEN1cnJ5Lm1kIjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGVudGVyTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZW50ZXJNb2R1bGU7CiAgZW50ZXJNb2R1bGUgJiYgZW50ZXJNb2R1bGUobW9kdWxlKTsKfSkoKTsKCi8qIEBqc3ggbWR4ICovCmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7CmltcG9ydCB7IG1keCB9IGZyb20gJ0BtZHgtanMvcmVhY3QnOwovKiBAanN4IG1keCAqLwoKdmFyIG1ha2VTaG9ydGNvZGUgPSBmdW5jdGlvbiBtYWtlU2hvcnRjb2RlKG5hbWUpIHsKICByZXR1cm4gZnVuY3Rpb24gTURYRGVmYXVsdFNob3J0Y29kZShwcm9wcykgewogICAgY29uc29sZS53YXJuKCJDb21wb25lbnQgIiArIG5hbWUgKyAiIHdhcyBub3QgaW1wb3J0ZWQsIGV4cG9ydGVkLCBvciBwcm92aWRlZCBieSBNRFhQcm92aWRlciBhcyBnbG9iYWwgc2NvcGUiKTsKICAgIHJldHVybiBtZHgoImRpdiIsIE9iamVjdC5hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgIF9fc291cmNlOiB7CiAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgICBsaW5lTnVtYmVyOiA5CiAgICAgIH0sCiAgICAgIF9fc2VsZjogdGhpcwogICAgfSkpOwogIH07Cn07Cgp2YXIgbGF5b3V0UHJvcHMgPSB7fTsKdmFyIE1EWExheW91dCA9ICJ3cmFwcGVyIjsKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTURYQ29udGVudChfcmVmKSB7CiAgdmFyIGNvbXBvbmVudHMgPSBfcmVmLmNvbXBvbmVudHMsCiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFsiY29tcG9uZW50cyJdKTsKCiAgcmV0dXJuIG1keChNRFhMYXlvdXQsIE9iamVjdC5hc3NpZ24oe30sIGxheW91dFByb3BzLCBwcm9wcywgewogICAgY29tcG9uZW50czogY29tcG9uZW50cywKICAgIG1keFR5cGU6ICJNRFhMYXlvdXQiLAogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjAKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgbWR4KCJoMSIsIE9iamVjdC5hc3NpZ24oewogICAgImlkIjogInVzaW5nLXJwYXJ0aWFsY3Vycnktd2l0aC1oZWFkbGVzcy1jaHJvbWUiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjEKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgIlVzaW5nIFIucGFydGlhbEN1cnJ5IHdpdGggaGVhZGxlc3MgQ2hyb21lIiksIG1keCgicHJlIiwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjQKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9LCBtZHgoImNvZGUiLCBPYmplY3QuYXNzaWduKHsKICAgIHBhcmVudE5hbWU6ICJwcmUiCiAgfSwgewogICAgImNsYXNzTmFtZSI6ICJsYW5ndWFnZS1qYXZhc2NyaXB0IgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDI0CiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJjb25zdCBSID0gcmVxdWlyZShcInJhbWJkYXhcIilcbmNvbnN0IENEUCA9IHJlcXVpcmUoXCJjaHJvbWUtcmVtb3RlLWludGVyZmFjZVwiKVxuY29uc3QgY2hyb21lTGF1bmNoZXIgPSByZXF1aXJlKFwiY2hyb21lLWxhdW5jaGVyXCIpXG5cbmNvbnN0IHN0YXJ0Q2hyb21lID0gKCkgPT4gY2hyb21lTGF1bmNoZXIubGF1bmNoKHtcbiAgcG9ydCAgICAgICAgIDogOTIyMixcbiAgaGFuZGxlU0lHSU5UIDogZmFsc2UsXG4gIGNocm9tZUZsYWdzICA6IFtcIi0taGVhZGxlc3NcIiwgXCItLW5vLXNhbmRib3hcIl1cbn0pXG5cbmNvbnN0IGV2YWx1YXRlRm4gPSBhc3luYyAoeyBcbiAgZm4sXG4gIGlucHV0LFxuICBleHByZXNzaW9uLFxuICBSdW50aW1lLFxuICBhc3luY0ZsYWcgXG59KSA9PiB7XG4gIGNvbnN0IGV4cHJlc3Npb25WYWx1ZSA9IGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCA/XG4gICAgYCgkeyBmbiB9KSgkeyBKU09OLnN0cmluZ2lmeShpbnB1dCkgfSlgIDpcbiAgICBleHByZXNzaW9uXG5cbiAgYXN5bmNGbGFnID0gUi5kZWZhdWx0VG8oZmFsc2UsIGFzeW5jRmxhZylcbiAgY29uc3QgZXZhbHVhdGVSZXN1bHQgPSBhd2FpdCBSdW50aW1lLmV2YWx1YXRlKHtcbiAgICBleHByZXNzaW9uICAgOiBleHByZXNzaW9uVmFsdWUsXG4gICAgYXdhaXRQcm9taXNlIDogYXN5bmNGbGFnLFxuICB9KVxuXG4gIHJldHVybiBSLnBhdGgoXCJyZXN1bHQudmFsdWVcIiwgZXZhbHVhdGVSZXN1bHQpXG59XG5cbmNvbnN0IHdvcmtlciA9IGFzeW5jIHVybCA9PiB7XG4gICAgY29uc3QgY2hyb21lID0gYXdhaXQgc3RhcnRDaHJvbWUoKVxuICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IENEUCh7IHBvcnQ6IDkyMjIgfSlcbiAgICBjb25zdCB7IFBhZ2UsIFJ1bnRpbWUsIE5ldHdvcmsgfSA9IGNsaWVudFxuICAgIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIFBhZ2UuZW5hYmxlKCksXG4gICAgICBOZXR3b3JrLmVuYWJsZSgpLFxuICAgICAgUnVudGltZS5lbmFibGUoKSxcbiAgICBdKVxuICAgIGNvbnN0IGV2YWx1YXRlID0gUi5wYXJ0aWFsQ3VycnkoXG4gICAgICBldmFsdWF0ZUZuLFxuICAgICAge1J1bnRpbWV9XG4gICAgKVxuXG4gICAgYXdhaXQgUGFnZS5uYXZpZ2F0ZSh7IHVybCB9KVxuICAgIGF3YWl0IFBhZ2UubG9hZEV2ZW50RmlyZWQoKVxuICAgIGNvbnN0IG51bWJlckRpdnMgPSBhd2FpdCBldmFsdWF0ZSh7XG4gICAgICAgICBleHByZXNzaW9uOiAnZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImRpdlwiKS5sZW5ndGgnXG4gICAgfSlcblxuICAgIGNvbnN0IG51bWJlckVsZW1lbnRzID0gc2VsZWN0b3IgPT4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcilcblxuICAgIGNvbnN0IG51bWJlckhlYWRpbmdzID0gYXdhaXQgZXZhbHVhdGUoe1xuICAgICAgICAgZm46IG51bWJlckVsZW1lbnRzLFxuICAgICAgICAgaW5wdXQ6IFwiaDFcIlxuICAgIH0pXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbnVtYmVyRGl2cyxcbiAgICAgICAgbnVtYmVySGVhZGluZ3NcbiAgICB9XG59XG5cbndvcmtlcignaHR0cHM6Ly9yZWRkaXQuY29tJylcbiAgLnRoZW4oY29uc29sZS5sb2cpXG4gIC5jYXRjaChjb25zb2xlLmxvZylcbiIpKSk7Cn0KCmlmICh0eXBlb2YgTURYQ29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgTURYQ29udGVudCAmJiBNRFhDb250ZW50ID09PSBPYmplY3QoTURYQ29udGVudCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTURYQ29udGVudCIsCiAgICAgIGZpbGVuYW1lOiAiZmlsZXMvZXhhbXBsZXMvUGFydGlhbEN1cnJ5Lm1kIgogICAgfQogIH0pOwp9CgpNRFhDb250ZW50LmlzTURYQ29tcG9uZW50ID0gdHJ1ZTsKOwoKKGZ1bmN0aW9uICgpIHsKICB2YXIgcmVhY3RIb3RMb2FkZXIgPSAodHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsIDogcmVxdWlyZSgncmVhY3QtaG90LWxvYWRlcicpKS5kZWZhdWx0OwoKICBpZiAoIXJlYWN0SG90TG9hZGVyKSB7CiAgICByZXR1cm47CiAgfQoKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihtYWtlU2hvcnRjb2RlLCAibWFrZVNob3J0Y29kZSIsICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvZmlsZXMvZXhhbXBsZXMvUGFydGlhbEN1cnJ5Lm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIobGF5b3V0UHJvcHMsICJsYXlvdXRQcm9wcyIsICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvZmlsZXMvZXhhbXBsZXMvUGFydGlhbEN1cnJ5Lm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYTGF5b3V0LCAiTURYTGF5b3V0IiwgIi9ob21lL3MvcmVwb3MvcmFtYmRheC9maWxlcy9leGFtcGxlcy9QYXJ0aWFsQ3VycnkubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihNRFhDb250ZW50LCAiTURYQ29udGVudCIsICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvZmlsZXMvZXhhbXBsZXMvUGFydGlhbEN1cnJ5Lm1kIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/home/s/repos/rambdax/files/examples/PartialCurry.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,slDAAL,CAJK,CAAP;AA0ED;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAzFMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"using-rpartialcurry-with-headless-chrome\"\n    }}>{`Using R.partialCurry with headless Chrome`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const R = require(\"rambdax\")\nconst CDP = require(\"chrome-remote-interface\")\nconst chromeLauncher = require(\"chrome-launcher\")\n\nconst startChrome = () => chromeLauncher.launch({\n  port         : 9222,\n  handleSIGINT : false,\n  chromeFlags  : [\"--headless\", \"--no-sandbox\"]\n})\n\nconst evaluateFn = async ({ \n  fn,\n  input,\n  expression,\n  Runtime,\n  asyncFlag \n}) => {\n  const expressionValue = expression === undefined ?\n    \\`(\\${ fn })(\\${ JSON.stringify(input) })\\` :\n    expression\n\n  asyncFlag = R.defaultTo(false, asyncFlag)\n  const evaluateResult = await Runtime.evaluate({\n    expression   : expressionValue,\n    awaitPromise : asyncFlag,\n  })\n\n  return R.path(\"result.value\", evaluateResult)\n}\n\nconst worker = async url => {\n    const chrome = await startChrome()\n    const client = await CDP({ port: 9222 })\n    const { Page, Runtime, Network } = client\n    await Promise.all([\n      Page.enable(),\n      Network.enable(),\n      Runtime.enable(),\n    ])\n    const evaluate = R.partialCurry(\n      evaluateFn,\n      {Runtime}\n    )\n\n    await Page.navigate({ url })\n    await Page.loadEventFired()\n    const numberDivs = await evaluate({\n         expression: 'document.querySelectorAll(\"div\").length'\n    })\n\n    const numberElements = selector => document.querySelectorAll(selector)\n\n    const numberHeadings = await evaluate({\n         fn: numberElements,\n         input: \"h1\"\n    })\n    \n    return {\n        numberDivs,\n        numberHeadings\n    }\n}\n\nworker('https://reddit.com')\n  .then(console.log)\n  .catch(console.log)\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}