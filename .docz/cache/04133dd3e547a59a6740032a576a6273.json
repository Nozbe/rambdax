{"remainingRequest":"/home/s/repos/rambdax/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/home/s/repos/rambdax/node_modules/@mdx-js/loader/index.js??ref--6-2!/home/s/repos/rambdax/node_modules/source-map-loader/index.js!/home/s/repos/rambdax/files/examples/PromiseAllChunks.md","dependencies":[{"path":"/home/s/repos/rambdax/files/examples/PromiseAllChunks.md","mtime":1555742370844},{"path":"/home/s/repos/rambdax/node_modules/cache-loader/dist/cjs.js","mtime":1559151226407},{"path":"/home/s/repos/rambdax/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559151226362},{"path":"/home/s/repos/rambdax/node_modules/@mdx-js/loader/index.js","mtime":1559151227205},{"path":"/home/s/repos/rambdax/node_modules/source-map-loader/index.js","mtime":1555741369915}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvbm9kZV9tb2R1bGVzL2JhYmVsLXByZXNldC1yZWFjdC1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIjsKdmFyIF9qc3hGaWxlTmFtZSA9ICIvaG9tZS9zL3JlcG9zL3JhbWJkYXgvZmlsZXMvZXhhbXBsZXMvUHJvbWlzZUFsbENodW5rcy5tZCI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7CgovKiBAanN4IG1keCAqLwppbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnOwppbXBvcnQgeyBtZHggfSBmcm9tICdAbWR4LWpzL3JlYWN0JzsKLyogQGpzeCBtZHggKi8KCnZhciBtYWtlU2hvcnRjb2RlID0gZnVuY3Rpb24gbWFrZVNob3J0Y29kZShuYW1lKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIE1EWERlZmF1bHRTaG9ydGNvZGUocHJvcHMpIHsKICAgIGNvbnNvbGUud2FybigiQ29tcG9uZW50ICIgKyBuYW1lICsgIiB3YXMgbm90IGltcG9ydGVkLCBleHBvcnRlZCwgb3IgcHJvdmlkZWQgYnkgTURYUHJvdmlkZXIgYXMgZ2xvYmFsIHNjb3BlIik7CiAgICByZXR1cm4gbWR4KCJkaXYiLCBPYmplY3QuYXNzaWduKHt9LCBwcm9wcywgewogICAgICBfX3NvdXJjZTogewogICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgICAgbGluZU51bWJlcjogOQogICAgICB9LAogICAgICBfX3NlbGY6IHRoaXMKICAgIH0pKTsKICB9Owp9OwoKdmFyIGxheW91dFByb3BzID0ge307CnZhciBNRFhMYXlvdXQgPSAid3JhcHBlciI7CmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1EWENvbnRlbnQoX3JlZikgewogIHZhciBjb21wb25lbnRzID0gX3JlZi5jb21wb25lbnRzLAogICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbImNvbXBvbmVudHMiXSk7CgogIHJldHVybiBtZHgoTURYTGF5b3V0LCBPYmplY3QuYXNzaWduKHt9LCBsYXlvdXRQcm9wcywgcHJvcHMsIHsKICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHMsCiAgICBtZHhUeXBlOiAiTURYTGF5b3V0IiwKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIwCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksIG1keCgiaDEiLCBPYmplY3QuYXNzaWduKHsKICAgICJpZCI6ICJwcm9taXNlYWxsLXdpdGgtY2h1bmtzLW9mLXByb21pc2VzIgogIH0sIHsKICAgIF9fc291cmNlOiB7CiAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsCiAgICAgIGxpbmVOdW1iZXI6IDIxCiAgICB9LAogICAgX19zZWxmOiB0aGlzCiAgfSksICJQcm9taXNlLmFsbCB3aXRoIGNodW5rcyBvZiBwcm9taXNlcyIpLCBtZHgoInAiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNAogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sICJUaGUgdGFzayBpcyB0byBsaW50IGh1Z2UgbGlzdCBvZiBmaWxlcyBpbiBmYXN0IG1hbm5lci4iKSwgbWR4KCJwcmUiLCB7CiAgICBfX3NvdXJjZTogewogICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLAogICAgICBsaW5lTnVtYmVyOiAyNQogICAgfSwKICAgIF9fc2VsZjogdGhpcwogIH0sIG1keCgiY29kZSIsIE9iamVjdC5hc3NpZ24oewogICAgcGFyZW50TmFtZTogInByZSIKICB9LCB7CiAgICAiY2xhc3NOYW1lIjogImxhbmd1YWdlLWphdmFzY3JpcHQiCiAgfSwgewogICAgX19zb3VyY2U6IHsKICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSwKICAgICAgbGluZU51bWJlcjogMjUKICAgIH0sCiAgICBfX3NlbGY6IHRoaXMKICB9KSwgImNvbnN0IFIgPSByZXF1aXJlKCdyYW1iZGF4JylcbmNvbnN0IHsgZXhlY0NvbW1hbmQgfSA9IHJlcXVpcmUoJy4vZXhlY0NvbW1hbmQnKVxuXG5hc3luYyBmdW5jdGlvbiBsaW50RmlsZXMoY3dkID0gcHJvY2Vzcy5jd2QoKSwgZmlsZXMpIHtcbiAgY29uc29sZS50aW1lKCdsaW50Rm9sZGVyJylcbiAgXG4gIGF3YWl0IFIubWFwRmFzdEFzeW5jKGFzeW5jIGNodW5rT2ZGaWxlcyA9PiB7XG4gICAgZm9yIChjb25zdCBmaWxlUGF0aCBvZiBjaHVua09mRmlsZXMpIHtcbiAgICAgIFxuICAgICAgYXdhaXQgZXhlY0NvbW1hbmQoXG4gICAgICAgIFIubXVsdGlsaW5lKGBcbiAgICAgICAgICBwcmV0dGllciBcbiAgICAgICAgICAtLW5vLXNlbWlcbiAgICAgICAgICAtLXNpbmdsZS1xdW90ZVxuICAgICAgICAgIC0tdHJhaWxpbmctY29tbWFcbiAgICAgICAgICAtLXdyaXRlXG4gICAgICAgICAgJHtmaWxlUGF0aH1cbiAgICAgICAgYClcbiAgICAgIH1cbiAgICB9XG4gIH0sIFIuc3BsaXRFdmVyeSg1LCBhbGxvd2VkRmlsZXMpKVxuXG4gIGNvbnNvbGUudGltZUVuZCgnbGludEZpbGVzJylcbn1cbiIpKSk7Cn0KCmlmICh0eXBlb2YgTURYQ29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgTURYQ29udGVudCAmJiBNRFhDb250ZW50ID09PSBPYmplY3QoTURYQ29udGVudCkgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShNRFhDb250ZW50KSkgewogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRFhDb250ZW50LCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiTURYQ29udGVudCIsCiAgICAgIGZpbGVuYW1lOiAiZmlsZXMvZXhhbXBsZXMvUHJvbWlzZUFsbENodW5rcy5tZCIKICAgIH0KICB9KTsKfQoKTURYQ29udGVudC5pc01EWENvbXBvbmVudCA9IHRydWU7CjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIobWFrZVNob3J0Y29kZSwgIm1ha2VTaG9ydGNvZGUiLCAiL2hvbWUvcy9yZXBvcy9yYW1iZGF4L2ZpbGVzL2V4YW1wbGVzL1Byb21pc2VBbGxDaHVua3MubWQiKTsKICByZWFjdEhvdExvYWRlci5yZWdpc3RlcihsYXlvdXRQcm9wcywgImxheW91dFByb3BzIiwgIi9ob21lL3MvcmVwb3MvcmFtYmRheC9maWxlcy9leGFtcGxlcy9Qcm9taXNlQWxsQ2h1bmtzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYTGF5b3V0LCAiTURYTGF5b3V0IiwgIi9ob21lL3MvcmVwb3MvcmFtYmRheC9maWxlcy9leGFtcGxlcy9Qcm9taXNlQWxsQ2h1bmtzLm1kIik7CiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoTURYQ29udGVudCwgIk1EWENvbnRlbnQiLCAiL2hvbWUvcy9yZXBvcy9yYW1iZGF4L2ZpbGVzL2V4YW1wbGVzL1Byb21pc2VBbGxDaHVua3MubWQiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkubGVhdmVNb2R1bGU7CiAgbGVhdmVNb2R1bGUgJiYgbGVhdmVNb2R1bGUobW9kdWxlKTsKfSkoKTs="},{"version":3,"sources":["/home/s/repos/rambdax/files/examples/PromiseAllChunks.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;AAAA;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AACA;;AAGF,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,6BAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG,EAApB;AAGA,IAAMC,SAAS,GAAG,SAAlB;AACA,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,oBAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL,wBAAQ;AACN,UAAM;AADA,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADK,EAIL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAJK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK;AAAM,IAAA,UAAU,EAAC;AAAjB,KAA2B;AAC5B,iBAAa;AADe,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0jBAAL,CALK,CAAP;AAiCD;;;;;;;;;;;;;AAEDD,UAAU,CAACE,cAAX,GAA4B,IAA5B;;;;;;;;;;0BAhDMV,a;0BAKAM,W;0BAGAC,S;0BACkBC,U","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"promiseall-with-chunks-of-promises\"\n    }}>{`Promise.all with chunks of promises`}</h1>\n    <p>{`The task is to lint huge list of files in fast manner.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const R = require('rambdax')\nconst { execCommand } = require('./execCommand')\n\nasync function lintFiles(cwd = process.cwd(), files) {\n  console.time('lintFolder')\n  \n  await R.mapFastAsync(async chunkOfFiles => {\n    for (const filePath of chunkOfFiles) {\n      \n      await execCommand(\n        R.multiline(\\`\n          prettier \n          --no-semi\n          --single-quote\n          --trailing-comma\n          --write\n          \\${filePath}\n        \\`)\n      }\n    }\n  }, R.splitEvery(5, allowedFiles))\n\n  console.timeEnd('lintFiles')\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}