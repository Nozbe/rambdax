{"remainingRequest":"/home/s/repos/rambdax/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/home/s/repos/rambdax/node_modules/@mdx-js/loader/index.js??ref--6-2!/home/s/repos/rambdax/node_modules/source-map-loader/index.js!/home/s/repos/rambdax/files/examples/CreateDocs.md","dependencies":[{"path":"/home/s/repos/rambdax/files/examples/CreateDocs.md","mtime":1555742370844},{"path":"/home/s/repos/rambdax/node_modules/cache-loader/dist/cjs.js","mtime":1559151226407},{"path":"/home/s/repos/rambdax/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559151226362},{"path":"/home/s/repos/rambdax/node_modules/@mdx-js/loader/index.js","mtime":1559151227205},{"path":"/home/s/repos/rambdax/node_modules/source-map-loader/index.js","mtime":1555741369915}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/s/repos/rambdax/files/examples/CreateDocs.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"create-documentation-files-with-composeasync-and-mapasync\"\n    }}>{`Create documentation files with composeAsync and mapAsync`}</h1>\n    <h2 {...{\n      \"id\": \"the-task\"\n    }}>{`The task`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Generate documentation from a folder`}</li>\n      <li parentName=\"ul\">{`For each Javascript file in the folder generate command for documentation generation`}</li>\n      <li parentName=\"ul\">{`Perform the bundle of commands`}</li>\n      <li parentName=\"ul\">{`Remove empty documentation files`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"the-tools\"\n    }}>{`The tools`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`documentation`}</inlineCode>{` - for documentation generation `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`klaw-sync`}</inlineCode>{` - for reading the content of the folder`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`fs-extra`}</inlineCode>{` - for file manipulations`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`rambdax`}</inlineCode>{` - for flow control`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`child_process`}</inlineCode>{` - for running the commands`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"the-solution\"\n    }}>{`The solution`}</h2>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Require modules`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`const R = require(\"rambdax\")\nconst fs = require(\"fs-extra\")\nconst klawSync = require(\"klaw-sync\")\nconst { exec } = require(\"child_process\")\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Create function for running CLI command`}</p>\n    </blockquote>\n    <p><inlineCode parentName=\"p\">{`documentation`}</inlineCode>{` is globally installed NPM library. It generates `}<inlineCode parentName=\"p\">{`markdown`}</inlineCode>{` files from files that follow `}<inlineCode parentName=\"p\">{`Flowtype`}</inlineCode>{` or`}<inlineCode parentName=\"p\">{`JSDoc`}</inlineCode>{` specification. `}</p>\n    <p>{`Each Javascript file in the folder will generate a CLI command. These commands will be executed using the following declaration:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const execCommand = (command, cwd = process.cwd()) =>\n  new Promise((resolve, reject) => {\n    const proc = exec(\n      command,\n      { cwd }\n    )\n    proc.stdout.on(\"data\", chunk => {\n      console.log(chunk.toString())\n    })\n    proc.stdout.on(\"end\", () => resolve())\n    proc.stdout.on(\"error\", err => reject(err))\n  })\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Declare main function`}</p>\n    </blockquote>\n    <p>{`The main function will be called `}{`\\``}{`generateDocumentation`}{`\\``}{` and will have the following typing:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`generateDocumentation({ output: String, source: String }): Promise\n`}</code></pre>\n    <p>{`For testing purposes, this function will be called in the following way:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`generateDocumentation({\n    source: \\`\\${__dirname}/src\\`\n    output: \\`\\${__dirname}/documentation\\`\n  })\n  .then(console.log)\n  .catch(console.log)\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Declaring the return statement`}</p>\n    </blockquote>\n    <p>{`The main function will return a call to `}<inlineCode parentName=\"p\">{`R.composeAsync`}</inlineCode>{` which is a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode></p>\n    <p>{`The pseudocode looks something like that:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`async generateDocumentation({ output, source}){\n   return await R.composeAsync(\n      STEP-N\n      ...  , \n      STEP-2,\n      STEP-1,\n   )(INPUT) \n}\n`}</code></pre>\n    <p>{`Now we declare the steps in the order of their execution.`}</p>\n    <p>{`Initially we start with getting the `}<inlineCode parentName=\"p\">{`INPUT`}</inlineCode></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Reading files from `}<inlineCode parentName=\"p\">{`source`}</inlineCode>{` folder`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`klawSync(source)\n`}</code></pre>\n    <p>{`This call returns array of objects, with `}<inlineCode parentName=\"p\">{`path`}</inlineCode>{` property holding the filepath info.`}</p>\n    <p>{`Now we declare the first step`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Get only Javascript files`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`R.filter(x => x.path.endsWith(\".js\"))\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Get the property `}<inlineCode parentName=\"p\">{`path`}</inlineCode></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{}}>{`R.map(R.prop(\"path\"))\n`}</code></pre>\n    <p>{`Now we have all the data required to map over all Javascript files.`}</p>\n    <p>{`We will perform asynchronous operations on each member of the array.`}</p>\n    <p>{`For that we can use `}<inlineCode parentName=\"p\">{`R.mapAsync`}</inlineCode>{` , which allows us exactly that.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`R.mapAsync(async filePath => {\n  const fileName = R.compose(\n    R.replace('.js', '.md'),\n    R.last,\n    R.split('/')\n  )(filePath)\n  const documentationFilePath = \\`\\${output}/\\${fileName}\\`\n  const command = \\`documentation build \\${filePath} -f md --shallow -o \\${documentationFilePath}\\`\n  await execCommand(command)\n  return documentationFilePath\n})\n`}</code></pre>\n    <p>{`For each `}<inlineCode parentName=\"p\">{`filePath`}</inlineCode>{` a command is generated and executed. After the command is performed, the location of the `}<inlineCode parentName=\"p\">{`markdown file`}</inlineCode>{`is returned.`}</p>\n    <p>{`As final step, we need to remove empty `}<inlineCode parentName=\"p\">{`markdown`}</inlineCode>{` files, because not all of Javascript files in the directory will have documentation declarations.`}</p>\n    <p>{`We can use the synchronous methods of `}<inlineCode parentName=\"p\">{`fs-extra`}</inlineCode>{` .`}</p>\n    <p>{`Which means that simple `}<inlineCode parentName=\"p\">{`R.map`}</inlineCode>{` will do the trick.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`R.map(documentationFilePath => {\n  const content = fs.readFileSync(documentationFilePath)\n  if (content.length < 120) {\n    fs.removeSync(documentationFilePath)\n  }\n})\n`}</code></pre>\n    <p>{`That was the final step.`}</p>\n    <p>{`I will just add some `}<inlineCode parentName=\"p\">{`async`}</inlineCode>{` related boilerplate in the main function and we are done.`}</p>\n    <p>{`Code is published at `}<a parentName=\"p\" {...{\n        \"href\": \"https://gist.github.com/selfrefactor/4e79e42dd98966f0bb532f242065a989\"\n      }}>{`https://gist.github.com/selfrefactor/4e79e42dd98966f0bb532f242065a989`}</a></p>\n    <p>{`Documentation for `}<inlineCode parentName=\"p\">{`Ramdbax`}</inlineCode>{` is located at `}<a parentName=\"p\" {...{\n        \"href\": \"https://selfrefactor.github.io/rambdax/\"\n      }}>{`https://selfrefactor.github.io/rambdax/`}</a></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Final version`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const R = require(\"rambdax\")\nconst fs = require(\"fs-extra\")\nconst klawSync = require(\"klaw-sync\")\nconst {\n  exec\n} = require(\"child_process\")\n\nconst execCommand = (command, cwd = process.cwd()) =>\n  new Promise((resolve, reject) => {\n    const proc = exec(\n      command, {\n        cwd\n      }\n    )\n    proc.stdout.on(\"data\", chunk => {\n      console.log(chunk.toString())\n    })\n    proc.stdout.on(\"end\", () => resolve())\n    proc.stdout.on(\"error\", err => reject(err))\n  })\n\n\nasync function generateDocumentation({\n  source,\n  output\n}) {\n  try {\n    return await R.composeAsync(\n      R.map(documentationFilePath => {\n        const content = fs.readFileSync(documentationFilePath)\n        if (content.length < 120) {\n          fs.removeSync(documentationFilePath)\n        }\n      }),\n      R.mapAsync(async filePath => {\n        const fileName = R.compose(\n          R.replace('.js', '.md'),\n          R.last,\n          R.split('/')\n        )(filePath)\n        const documentationFilePath = \\`\\${output}/\\${fileName}\\`\n        const command = \\`documentation build \\${filePath} -f md --shallow -o \\${documentationFilePath}\\`\n        await execCommand(command)\n        return documentationFilePath\n      }),\n      R.map(R.prop(\"path\")),\n      R.filter(a => a.path.endsWith(\".js\"))\n    )(klawSync(source))\n  }\n  catch (err) {\n    console.log(err)\n  }\n}\n\n\ngenerateDocumentation({\n    source: \\`\\${__dirname}/src\\`,\n    output: \\`\\${__dirname}/documentation\\`\n  })\n  .then(console.log)\n  .catch(console.log)\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "]}]}